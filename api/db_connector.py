import sys
import os
import subprocess
from time import sleep
import socket 

###################################
# MYSQL
###################################
import mysql.connector
from mysql.connector import Error

###################################
# ELASTICSEARCH
###################################
from elasticsearch import Elasticsearch
from elasticsearch.exceptions import AuthenticationException
from elasticsearch.helpers import bulk 
import logging
from elasticsearch.exceptions import NotFoundError

###################################
# FAKER, to build random data
###################################
from faker import Faker
fake = Faker()

# Enabling logging so that we can see it in K8S Logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  
        logging.FileHandler('app.log', mode='a')
    ]
)
logger = logging.getLogger()

# the adress of the mysql database in the k8s cluster
mysql_host = "mysql.default.svc.cluster.local"

try:
    logger.info(f"Resolving {mysql_host}...")
    ip = socket.gethostbyname(mysql_host)
    logger.info(f"DNS resolution successful: {mysql_host} â†’ {ip}")
except socket.gaierror as e:
    logger.error(f"DNS resolution failed: {e}")

def get_db():
    """
    Connects to the database and returns a database object

    return : the cursor to the databse
    """
    db = mysql.connector.connect(
    host=mysql_host,
    user="root",
    password="password",
    database="data",
    port=3306
)
    return db


def get_elastic_client(password):
    """
    connect using the http authentification and the password generated by ELASTIC 
    when creating the pod, changes everytime it is launched in a new pod, so loaded as a paremeter

    return : elastic client
    """
    client = Elasticsearch(
    "https://quickstart-es-http.default.svc:9200",
    http_auth=("elastic", password),
    verify_certs=False
    ) 

    try:
        response = client.info()
    except AuthenticationException:
        print("Authentication failed. Please check your credentials.")
    except Exception as e:
        print(f"Error connecting to Elasticsearch: {e}")

    return client
    
